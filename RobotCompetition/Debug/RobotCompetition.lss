
RobotCompetition.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000023c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000290  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002c0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d8  00000000  00000000  000002fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000110f  00000000  00000000  000003d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000734  00000000  00000000  000014e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000805  00000000  00000000  00001c17  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002dc  00000000  00000000  0000241c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004d3  00000000  00000000  000026f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000dde  00000000  00000000  00002bcb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c8  00000000  00000000  000039a9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	24 c0       	rjmp	.+72     	; 0x4c <__bad_interrupt>
   4:	23 c0       	rjmp	.+70     	; 0x4c <__bad_interrupt>
   6:	22 c0       	rjmp	.+68     	; 0x4c <__bad_interrupt>
   8:	21 c0       	rjmp	.+66     	; 0x4c <__bad_interrupt>
   a:	20 c0       	rjmp	.+64     	; 0x4c <__bad_interrupt>
   c:	1f c0       	rjmp	.+62     	; 0x4c <__bad_interrupt>
   e:	1e c0       	rjmp	.+60     	; 0x4c <__bad_interrupt>
  10:	1d c0       	rjmp	.+58     	; 0x4c <__bad_interrupt>
  12:	1c c0       	rjmp	.+56     	; 0x4c <__bad_interrupt>
  14:	1b c0       	rjmp	.+54     	; 0x4c <__bad_interrupt>
  16:	1a c0       	rjmp	.+52     	; 0x4c <__bad_interrupt>
  18:	19 c0       	rjmp	.+50     	; 0x4c <__bad_interrupt>
  1a:	18 c0       	rjmp	.+48     	; 0x4c <__bad_interrupt>
  1c:	17 c0       	rjmp	.+46     	; 0x4c <__bad_interrupt>
  1e:	16 c0       	rjmp	.+44     	; 0x4c <__bad_interrupt>
  20:	15 c0       	rjmp	.+42     	; 0x4c <__bad_interrupt>
  22:	14 c0       	rjmp	.+40     	; 0x4c <__bad_interrupt>
  24:	13 c0       	rjmp	.+38     	; 0x4c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ec e3       	ldi	r30, 0x3C	; 60
  3a:	f2 e0       	ldi	r31, 0x02	; 2
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a0 36       	cpi	r26, 0x60	; 96
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>
  48:	c9 d0       	rcall	.+402    	; 0x1dc <main>
  4a:	f6 c0       	rjmp	.+492    	; 0x238 <_exit>

0000004c <__bad_interrupt>:
  4c:	d9 cf       	rjmp	.-78     	; 0x0 <__vectors>

0000004e <USART_Init>:
		}
	}
		
	if(ReadRequest(OUT_Y_H) & 0b01010000 && ReadRequest(OUT_X_H) & 0b11110000) {
		StopEngines();
		while(ReadRequest(OUT_Y_H) & 0b01010000) {
  4e:	90 bd       	out	0x20, r25	; 32
  50:	89 b9       	out	0x09, r24	; 9
  52:	1b b8       	out	0x0b, r1	; 11
  54:	88 e1       	ldi	r24, 0x18	; 24
  56:	8a b9       	out	0x0a, r24	; 10
  58:	86 e8       	ldi	r24, 0x86	; 134
  5a:	80 bd       	out	0x20, r24	; 32
  5c:	08 95       	ret

0000005e <USART_Transmit>:
  5e:	5d 9b       	sbis	0x0b, 5	; 11
  60:	fe cf       	rjmp	.-4      	; 0x5e <USART_Transmit>
  62:	8c b9       	out	0x0c, r24	; 12
  64:	5e 9b       	sbis	0x0b, 6	; 11
  66:	fe cf       	rjmp	.-4      	; 0x64 <USART_Transmit+0x6>
  68:	5e 9a       	sbi	0x0b, 6	; 11
  6a:	08 95       	ret

0000006c <initPWM>:
  6c:	2f b5       	in	r18, 0x2f	; 47
  6e:	2f 70       	andi	r18, 0x0F	; 15
  70:	2f bd       	out	0x2f, r18	; 47
  72:	2e b5       	in	r18, 0x2e	; 46
  74:	2f 72       	andi	r18, 0x2F	; 47
  76:	2e bd       	out	0x2e, r18	; 46
  78:	6f 3f       	cpi	r22, 0xFF	; 255
  7a:	71 05       	cpc	r23, r1
  7c:	69 f4       	brne	.+26     	; 0x98 <initPWM+0x2c>
  7e:	2f b5       	in	r18, 0x2f	; 47
  80:	2d 7f       	andi	r18, 0xFD	; 253
  82:	2f bd       	out	0x2f, r18	; 47
  84:	2e b5       	in	r18, 0x2e	; 46
  86:	2f 7e       	andi	r18, 0xEF	; 239
  88:	2e bd       	out	0x2e, r18	; 46
  8a:	2f b5       	in	r18, 0x2f	; 47
  8c:	21 60       	ori	r18, 0x01	; 1
  8e:	2f bd       	out	0x2f, r18	; 47
  90:	2e b5       	in	r18, 0x2e	; 46
  92:	28 60       	ori	r18, 0x08	; 8
  94:	2e bd       	out	0x2e, r18	; 46
  96:	1d c0       	rjmp	.+58     	; 0xd2 <initPWM+0x66>
  98:	6f 3f       	cpi	r22, 0xFF	; 255
  9a:	21 e0       	ldi	r18, 0x01	; 1
  9c:	72 07       	cpc	r23, r18
  9e:	69 f4       	brne	.+26     	; 0xba <initPWM+0x4e>
  a0:	2f b5       	in	r18, 0x2f	; 47
  a2:	2e 7f       	andi	r18, 0xFE	; 254
  a4:	2f bd       	out	0x2f, r18	; 47
  a6:	2e b5       	in	r18, 0x2e	; 46
  a8:	2f 7e       	andi	r18, 0xEF	; 239
  aa:	2e bd       	out	0x2e, r18	; 46
  ac:	2f b5       	in	r18, 0x2f	; 47
  ae:	22 60       	ori	r18, 0x02	; 2
  b0:	2f bd       	out	0x2f, r18	; 47
  b2:	2e b5       	in	r18, 0x2e	; 46
  b4:	28 60       	ori	r18, 0x08	; 8
  b6:	2e bd       	out	0x2e, r18	; 46
  b8:	0c c0       	rjmp	.+24     	; 0xd2 <initPWM+0x66>
  ba:	6f 3f       	cpi	r22, 0xFF	; 255
  bc:	73 40       	sbci	r23, 0x03	; 3
  be:	49 f4       	brne	.+18     	; 0xd2 <initPWM+0x66>
  c0:	2e b5       	in	r18, 0x2e	; 46
  c2:	2f 7e       	andi	r18, 0xEF	; 239
  c4:	2e bd       	out	0x2e, r18	; 46
  c6:	2f b5       	in	r18, 0x2f	; 47
  c8:	23 60       	ori	r18, 0x03	; 3
  ca:	2f bd       	out	0x2f, r18	; 47
  cc:	2e b5       	in	r18, 0x2e	; 46
  ce:	28 60       	ori	r18, 0x08	; 8
  d0:	2e bd       	out	0x2e, r18	; 46
  d2:	81 30       	cpi	r24, 0x01	; 1
  d4:	91 05       	cpc	r25, r1
  d6:	21 f4       	brne	.+8      	; 0xe0 <initPWM+0x74>
  d8:	2e b5       	in	r18, 0x2e	; 46
  da:	21 60       	ori	r18, 0x01	; 1
  dc:	2e bd       	out	0x2e, r18	; 46
  de:	0e c0       	rjmp	.+28     	; 0xfc <initPWM+0x90>
  e0:	88 30       	cpi	r24, 0x08	; 8
  e2:	91 05       	cpc	r25, r1
  e4:	21 f4       	brne	.+8      	; 0xee <initPWM+0x82>
  e6:	2e b5       	in	r18, 0x2e	; 46
  e8:	22 60       	ori	r18, 0x02	; 2
  ea:	2e bd       	out	0x2e, r18	; 46
  ec:	0f c0       	rjmp	.+30     	; 0x10c <initPWM+0xa0>
  ee:	80 34       	cpi	r24, 0x40	; 64
  f0:	91 05       	cpc	r25, r1
  f2:	21 f4       	brne	.+8      	; 0xfc <initPWM+0x90>
  f4:	8e b5       	in	r24, 0x2e	; 46
  f6:	83 60       	ori	r24, 0x03	; 3
  f8:	8e bd       	out	0x2e, r24	; 46
  fa:	08 95       	ret
  fc:	81 15       	cp	r24, r1
  fe:	21 e0       	ldi	r18, 0x01	; 1
 100:	92 07       	cpc	r25, r18
 102:	21 f4       	brne	.+8      	; 0x10c <initPWM+0xa0>
 104:	8e b5       	in	r24, 0x2e	; 46
 106:	84 60       	ori	r24, 0x04	; 4
 108:	8e bd       	out	0x2e, r24	; 46
 10a:	08 95       	ret
 10c:	81 15       	cp	r24, r1
 10e:	94 40       	sbci	r25, 0x04	; 4
 110:	19 f4       	brne	.+6      	; 0x118 <initPWM+0xac>
 112:	8e b5       	in	r24, 0x2e	; 46
 114:	85 60       	ori	r24, 0x05	; 5
 116:	8e bd       	out	0x2e, r24	; 46
 118:	08 95       	ret

0000011a <SendStart>:
 11a:	84 ea       	ldi	r24, 0xA4	; 164
 11c:	86 bf       	out	0x36, r24	; 54
 11e:	06 b6       	in	r0, 0x36	; 54
 120:	07 fe       	sbrs	r0, 7
 122:	fd cf       	rjmp	.-6      	; 0x11e <SendStart+0x4>
 124:	08 95       	ret

00000126 <I2CRequest>:
 126:	86 2b       	or	r24, r22
 128:	83 b9       	out	0x03, r24	; 3
 12a:	84 e8       	ldi	r24, 0x84	; 132
 12c:	86 bf       	out	0x36, r24	; 54
 12e:	06 b6       	in	r0, 0x36	; 54
 130:	07 fe       	sbrs	r0, 7
 132:	fd cf       	rjmp	.-6      	; 0x12e <I2CRequest+0x8>
 134:	67 2b       	or	r22, r23
 136:	29 f0       	breq	.+10     	; 0x142 <I2CRequest+0x1c>
 138:	84 e8       	ldi	r24, 0x84	; 132
 13a:	86 bf       	out	0x36, r24	; 54
 13c:	06 b6       	in	r0, 0x36	; 54
 13e:	07 fe       	sbrs	r0, 7
 140:	fd cf       	rjmp	.-6      	; 0x13c <I2CRequest+0x16>
 142:	08 95       	ret

00000144 <SendWrite>:
 144:	83 b9       	out	0x03, r24	; 3
 146:	84 e8       	ldi	r24, 0x84	; 132
 148:	86 bf       	out	0x36, r24	; 54
 14a:	06 b6       	in	r0, 0x36	; 54
 14c:	07 fe       	sbrs	r0, 7
 14e:	fd cf       	rjmp	.-6      	; 0x14a <SendWrite+0x6>
 150:	08 95       	ret

00000152 <SendStop>:
 152:	84 e9       	ldi	r24, 0x94	; 148
 154:	86 bf       	out	0x36, r24	; 54
 156:	06 b6       	in	r0, 0x36	; 54
 158:	04 fc       	sbrc	r0, 4
 15a:	fd cf       	rjmp	.-6      	; 0x156 <SendStop+0x4>
 15c:	08 95       	ret

0000015e <ReadRequest>:
 15e:	cf 93       	push	r28
 160:	c8 2f       	mov	r28, r24
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	d9 df       	rcall	.-78     	; 0x11a <SendStart>
 168:	60 e0       	ldi	r22, 0x00	; 0
 16a:	70 e0       	ldi	r23, 0x00	; 0
 16c:	80 e3       	ldi	r24, 0x30	; 48
 16e:	db df       	rcall	.-74     	; 0x126 <I2CRequest>
 170:	8c 2f       	mov	r24, r28
 172:	e8 df       	rcall	.-48     	; 0x144 <SendWrite>
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	d0 df       	rcall	.-96     	; 0x11a <SendStart>
 17a:	61 e0       	ldi	r22, 0x01	; 1
 17c:	70 e0       	ldi	r23, 0x00	; 0
 17e:	80 e3       	ldi	r24, 0x30	; 48
 180:	d2 df       	rcall	.-92     	; 0x126 <I2CRequest>
 182:	e7 df       	rcall	.-50     	; 0x152 <SendStop>
 184:	83 b1       	in	r24, 0x03	; 3
 186:	cf 91       	pop	r28
 188:	08 95       	ret

0000018a <WriteRequest>:
 18a:	cf 93       	push	r28
 18c:	df 93       	push	r29
 18e:	d8 2f       	mov	r29, r24
 190:	c6 2f       	mov	r28, r22
 192:	80 e0       	ldi	r24, 0x00	; 0
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	c1 df       	rcall	.-126    	; 0x11a <SendStart>
 198:	60 e0       	ldi	r22, 0x00	; 0
 19a:	70 e0       	ldi	r23, 0x00	; 0
 19c:	80 e3       	ldi	r24, 0x30	; 48
 19e:	c3 df       	rcall	.-122    	; 0x126 <I2CRequest>
 1a0:	8d 2f       	mov	r24, r29
 1a2:	d0 df       	rcall	.-96     	; 0x144 <SendWrite>
 1a4:	8c 2f       	mov	r24, r28
 1a6:	ce df       	rcall	.-100    	; 0x144 <SendWrite>
 1a8:	d4 df       	rcall	.-88     	; 0x152 <SendStop>
 1aa:	df 91       	pop	r29
 1ac:	cf 91       	pop	r28
 1ae:	08 95       	ret

000001b0 <LDRleft>:
//Reads what the light values are at the moment, if they are below/above certain thresholds reverse/turn, else drive



char LDRleft(void)
{	ADMUX = (1<<REFS0)|(1<<ADLAR)|(1<<MUX1);	// init analog V_cc with capacitor at AREF-Pin & ADC2 active
 1b0:	82 e6       	ldi	r24, 0x62	; 98
 1b2:	87 b9       	out	0x07, r24	; 7
	ADCSRA= (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADSC);	// enable A/D-converter
 1b4:	86 ec       	ldi	r24, 0xC6	; 198
 1b6:	86 b9       	out	0x06, r24	; 6
	PORTD |= (1<<PC3);	// light left
 1b8:	93 9a       	sbi	0x12, 3	; 18
	
	while((ADCSRA & (1<<ADSC)))	{	}	// wait for converter end
 1ba:	36 99       	sbic	0x06, 6	; 6
 1bc:	fe cf       	rjmp	.-4      	; 0x1ba <LDRleft+0xa>
	
	USART_Transmit(ADCL);
 1be:	84 b1       	in	r24, 0x04	; 4
 1c0:	4e df       	rcall	.-356    	; 0x5e <USART_Transmit>
	return ADCH;
 1c2:	85 b1       	in	r24, 0x05	; 5
}
 1c4:	08 95       	ret

000001c6 <LDRright>:

char LDRright(void)
{	ADMUX = (1<<REFS0)|(1<<ADLAR)|(1<<MUX1);	// init analog V_cc with capacitor at AREF-Pin & ADC2 active
 1c6:	82 e6       	ldi	r24, 0x62	; 98
 1c8:	87 b9       	out	0x07, r24	; 7
	ADCSRA= (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADSC);	// enable A/D-converter
 1ca:	86 ec       	ldi	r24, 0xC6	; 198
 1cc:	86 b9       	out	0x06, r24	; 6
	PORTD |= (1<<PC2);	// light right
 1ce:	92 9a       	sbi	0x12, 2	; 18
	
	while((ADCSRA & (1<<ADSC)))	{	}	// wait for converter end
 1d0:	36 99       	sbic	0x06, 6	; 6
 1d2:	fe cf       	rjmp	.-4      	; 0x1d0 <LDRright+0xa>
	
	USART_Transmit(ADCL);
 1d4:	84 b1       	in	r24, 0x04	; 4
 1d6:	43 df       	rcall	.-378    	; 0x5e <USART_Transmit>
	return ADCH;
 1d8:	85 b1       	in	r24, 0x05	; 5
}
 1da:	08 95       	ret

000001dc <main>:
//################################ Main ############################################
//##################################################################################

int main(void)
{
	DDRB |= (1<<PB1)|(1<<PB2);
 1dc:	87 b3       	in	r24, 0x17	; 23
 1de:	86 60       	ori	r24, 0x06	; 6
 1e0:	87 bb       	out	0x17, r24	; 23
	DDRD |= (1<<PD6)|(1<<PD7);
 1e2:	81 b3       	in	r24, 0x11	; 17
 1e4:	80 6c       	ori	r24, 0xC0	; 192
 1e6:	81 bb       	out	0x11, r24	; 17

	DDRD &= ~(1<<PD0);
 1e8:	88 98       	cbi	0x11, 0	; 17
	DDRD |= (1<<PD1);
 1ea:	89 9a       	sbi	0x11, 1	; 17
	
	DDRC |= (1<<PC1);
 1ec:	a1 9a       	sbi	0x14, 1	; 20
	PORTC |= (1<<PC1);
 1ee:	a9 9a       	sbi	0x15, 1	; 21

	USART_Init (103);
 1f0:	87 e6       	ldi	r24, 0x67	; 103
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	2c df       	rcall	.-424    	; 0x4e <USART_Init>

	initPWM(prescaler,counterValue_PWM);
 1f6:	6f ef       	ldi	r22, 0xFF	; 255
 1f8:	70 e0       	ldi	r23, 0x00	; 0
 1fa:	88 e0       	ldi	r24, 0x08	; 8
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	36 df       	rcall	.-404    	; 0x6c <initPWM>

	//######################## Accelerometer config ################################
	PIND |= (1 << PD0) | (1 << PD1);
 200:	80 b3       	in	r24, 0x10	; 16
 202:	83 60       	ori	r24, 0x03	; 3
 204:	80 bb       	out	0x10, r24	; 16
	PINC |= (1 << PC4) | (1 << PC5);
 206:	83 b3       	in	r24, 0x13	; 19
 208:	80 63       	ori	r24, 0x30	; 48
 20a:	83 bb       	out	0x13, r24	; 19
	TWBR = 100;
 20c:	84 e6       	ldi	r24, 0x64	; 100
 20e:	80 b9       	out	0x00, r24	; 0

	//CR1
	WriteRequest(0x20, 0b11000111);
 210:	67 ec       	ldi	r22, 0xC7	; 199
 212:	80 e2       	ldi	r24, 0x20	; 32
 214:	ba df       	rcall	.-140    	; 0x18a <WriteRequest>
	//CR2
	WriteRequest(0x21, 0b00001100);
 216:	6c e0       	ldi	r22, 0x0C	; 12
 218:	81 e2       	ldi	r24, 0x21	; 33
 21a:	b7 df       	rcall	.-146    	; 0x18a <WriteRequest>
	//CFG
	WriteRequest(0x30, 0b11001010);
 21c:	6a ec       	ldi	r22, 0xCA	; 202
 21e:	80 e3       	ldi	r24, 0x30	; 48
 220:	b4 df       	rcall	.-152    	; 0x18a <WriteRequest>

//Reads and returns the slope of the provided axis
char FindSlope(char axis) {
	char x, y;
	if (axis == 'x') {
		x = ReadRequest(OUT_X_H);
 222:	89 e2       	ldi	r24, 0x29	; 41
 224:	9c df       	rcall	.-200    	; 0x15e <ReadRequest>
		//Drive(dutyc_f,counterValue_PWM);

		//AccelerationRead();


		USART_Transmit('L');
 226:	8c e4       	ldi	r24, 0x4C	; 76
 228:	1a df       	rcall	.-460    	; 0x5e <USART_Transmit>
		USART_Transmit(LDRleft());
 22a:	c2 df       	rcall	.-124    	; 0x1b0 <LDRleft>
 22c:	18 df       	rcall	.-464    	; 0x5e <USART_Transmit>
		USART_Transmit('R');
 22e:	82 e5       	ldi	r24, 0x52	; 82
 230:	16 df       	rcall	.-468    	; 0x5e <USART_Transmit>
		USART_Transmit(LDRright());
 232:	c9 df       	rcall	.-110    	; 0x1c6 <LDRright>
 234:	14 df       	rcall	.-472    	; 0x5e <USART_Transmit>
 236:	f7 cf       	rjmp	.-18     	; 0x226 <main+0x4a>

00000238 <_exit>:
 238:	f8 94       	cli

0000023a <__stop_program>:
 23a:	ff cf       	rjmp	.-2      	; 0x23a <__stop_program>
