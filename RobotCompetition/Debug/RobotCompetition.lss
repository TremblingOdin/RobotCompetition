
RobotCompetition.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000017e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001d2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000204  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a73  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000062b  00000000  00000000  00000d2b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004c2  00000000  00000000  00001356  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001f8  00000000  00000000  00001818  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000429  00000000  00000000  00001a10  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000091e  00000000  00000000  00001e39  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  00002757  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	89 d0       	rcall	.+274    	; 0x146 <main>
  34:	a2 c0       	rjmp	.+324    	; 0x17a <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <initPWM>:
 {
	 while (!(UCSRA & (1<< RXC)))
	 {
	 }
	 return UDR;
 }
  38:	2f b5       	in	r18, 0x2f	; 47
  3a:	2f 70       	andi	r18, 0x0F	; 15
  3c:	2f bd       	out	0x2f, r18	; 47
  3e:	2e b5       	in	r18, 0x2e	; 46
  40:	2f 72       	andi	r18, 0x2F	; 47
  42:	2e bd       	out	0x2e, r18	; 46
  44:	6f 3f       	cpi	r22, 0xFF	; 255
  46:	71 05       	cpc	r23, r1
  48:	69 f4       	brne	.+26     	; 0x64 <__SREG__+0x25>
  4a:	2f b5       	in	r18, 0x2f	; 47
  4c:	2d 7f       	andi	r18, 0xFD	; 253
  4e:	2f bd       	out	0x2f, r18	; 47
  50:	2e b5       	in	r18, 0x2e	; 46
  52:	2f 7e       	andi	r18, 0xEF	; 239
  54:	2e bd       	out	0x2e, r18	; 46
  56:	2f b5       	in	r18, 0x2f	; 47
  58:	21 60       	ori	r18, 0x01	; 1
  5a:	2f bd       	out	0x2f, r18	; 47
  5c:	2e b5       	in	r18, 0x2e	; 46
  5e:	28 60       	ori	r18, 0x08	; 8
  60:	2e bd       	out	0x2e, r18	; 46
  62:	1d c0       	rjmp	.+58     	; 0x9e <__SREG__+0x5f>
  64:	6f 3f       	cpi	r22, 0xFF	; 255
  66:	21 e0       	ldi	r18, 0x01	; 1
  68:	72 07       	cpc	r23, r18
  6a:	69 f4       	brne	.+26     	; 0x86 <__SREG__+0x47>
  6c:	2f b5       	in	r18, 0x2f	; 47
  6e:	2e 7f       	andi	r18, 0xFE	; 254
  70:	2f bd       	out	0x2f, r18	; 47
  72:	2e b5       	in	r18, 0x2e	; 46
  74:	2f 7e       	andi	r18, 0xEF	; 239
  76:	2e bd       	out	0x2e, r18	; 46
  78:	2f b5       	in	r18, 0x2f	; 47
  7a:	22 60       	ori	r18, 0x02	; 2
  7c:	2f bd       	out	0x2f, r18	; 47
  7e:	2e b5       	in	r18, 0x2e	; 46
  80:	28 60       	ori	r18, 0x08	; 8
  82:	2e bd       	out	0x2e, r18	; 46
  84:	0c c0       	rjmp	.+24     	; 0x9e <__SREG__+0x5f>
  86:	6f 3f       	cpi	r22, 0xFF	; 255
  88:	73 40       	sbci	r23, 0x03	; 3
  8a:	49 f4       	brne	.+18     	; 0x9e <__SREG__+0x5f>
  8c:	2e b5       	in	r18, 0x2e	; 46
  8e:	2f 7e       	andi	r18, 0xEF	; 239
  90:	2e bd       	out	0x2e, r18	; 46
  92:	2f b5       	in	r18, 0x2f	; 47
  94:	23 60       	ori	r18, 0x03	; 3
  96:	2f bd       	out	0x2f, r18	; 47
  98:	2e b5       	in	r18, 0x2e	; 46
  9a:	28 60       	ori	r18, 0x08	; 8
  9c:	2e bd       	out	0x2e, r18	; 46
  9e:	81 30       	cpi	r24, 0x01	; 1
  a0:	91 05       	cpc	r25, r1
  a2:	21 f4       	brne	.+8      	; 0xac <__SREG__+0x6d>
  a4:	2e b5       	in	r18, 0x2e	; 46
  a6:	21 60       	ori	r18, 0x01	; 1
  a8:	2e bd       	out	0x2e, r18	; 46
  aa:	0e c0       	rjmp	.+28     	; 0xc8 <__SREG__+0x89>
  ac:	88 30       	cpi	r24, 0x08	; 8
  ae:	91 05       	cpc	r25, r1
  b0:	21 f4       	brne	.+8      	; 0xba <__SREG__+0x7b>
  b2:	2e b5       	in	r18, 0x2e	; 46
  b4:	22 60       	ori	r18, 0x02	; 2
  b6:	2e bd       	out	0x2e, r18	; 46
  b8:	0f c0       	rjmp	.+30     	; 0xd8 <__SREG__+0x99>
  ba:	80 34       	cpi	r24, 0x40	; 64
  bc:	91 05       	cpc	r25, r1
  be:	21 f4       	brne	.+8      	; 0xc8 <__SREG__+0x89>
  c0:	8e b5       	in	r24, 0x2e	; 46
  c2:	83 60       	ori	r24, 0x03	; 3
  c4:	8e bd       	out	0x2e, r24	; 46
  c6:	08 95       	ret
  c8:	81 15       	cp	r24, r1
  ca:	21 e0       	ldi	r18, 0x01	; 1
  cc:	92 07       	cpc	r25, r18
  ce:	21 f4       	brne	.+8      	; 0xd8 <__SREG__+0x99>
  d0:	8e b5       	in	r24, 0x2e	; 46
  d2:	84 60       	ori	r24, 0x04	; 4
  d4:	8e bd       	out	0x2e, r24	; 46
  d6:	08 95       	ret
  d8:	81 15       	cp	r24, r1
  da:	94 40       	sbci	r25, 0x04	; 4
  dc:	19 f4       	brne	.+6      	; 0xe4 <__SREG__+0xa5>
  de:	8e b5       	in	r24, 0x2e	; 46
  e0:	85 60       	ori	r24, 0x05	; 5
  e2:	8e bd       	out	0x2e, r24	; 46
  e4:	08 95       	ret

000000e6 <USART_Init>:
  e6:	90 bd       	out	0x20, r25	; 32
  e8:	89 b9       	out	0x09, r24	; 9
  ea:	1b b8       	out	0x0b, r1	; 11
  ec:	88 e1       	ldi	r24, 0x18	; 24
  ee:	8a b9       	out	0x0a, r24	; 10
  f0:	86 e8       	ldi	r24, 0x86	; 134
  f2:	80 bd       	out	0x20, r24	; 32
  f4:	08 95       	ret

000000f6 <USART_Transmit>:
  f6:	5d 9b       	sbis	0x0b, 5	; 11
  f8:	fe cf       	rjmp	.-4      	; 0xf6 <USART_Transmit>
  fa:	8c b9       	out	0x0c, r24	; 12
  fc:	08 95       	ret

000000fe <Sende_In_ASCII>:

 // ####################### sending ASCII ##########################################

 void Sende_In_ASCII (unsigned char Analogwert)
 {
  fe:	cf 93       	push	r28
	 unsigned char umgewandelte_Zahl[3];		// 3 damit noch eine Lücke gesendet wird
	 umgewandelte_Zahl[3]= ' ';
	 unsigned char zahl = Analogwert;

	 // transfer to ASCII
	 umgewandelte_Zahl[2] = (zahl % 10) + 48 ;  // 123 / 10 gibt hier den Rest 3
 100:	9d ec       	ldi	r25, 0xCD	; 205
 102:	89 9f       	mul	r24, r25
 104:	91 2d       	mov	r25, r1
 106:	11 24       	eor	r1, r1
 108:	96 95       	lsr	r25
 10a:	96 95       	lsr	r25
 10c:	96 95       	lsr	r25
 10e:	99 0f       	add	r25, r25
 110:	29 2f       	mov	r18, r25
 112:	22 0f       	add	r18, r18
 114:	22 0f       	add	r18, r18
 116:	92 0f       	add	r25, r18
 118:	c8 2f       	mov	r28, r24
 11a:	c9 1b       	sub	r28, r25
 11c:	c0 5d       	subi	r28, 0xD0	; 208
	 zahl = zahl / 10;					        // ganzzahlige division 123 / 10 = 12
	 umgewandelte_Zahl[1] =( zahl % 10) + 48 ;  // 12 / 10 gibt hier den Rest 2
	 zahl = zahl / 10;							// 12 /10 = 1
	 umgewandelte_Zahl[0] = zahl + 48 ;
 11e:	99 e2       	ldi	r25, 0x29	; 41
 120:	89 9f       	mul	r24, r25
 122:	81 2d       	mov	r24, r1
 124:	11 24       	eor	r1, r1
 126:	82 95       	swap	r24
 128:	8f 70       	andi	r24, 0x0F	; 15


	 // sending ASCII letters
	 UCSRB = (1<<TXEN);							// sending on receiving off
 12a:	98 e0       	ldi	r25, 0x08	; 8
 12c:	9a b9       	out	0x0a, r25	; 10
	 int i = 0;

	 for ( i = 0; i < 3; i++)
	 {
		 USART_Transmit (umgewandelte_Zahl[i]);
 12e:	80 5d       	subi	r24, 0xD0	; 208
 130:	e2 df       	rcall	.-60     	; 0xf6 <USART_Transmit>
		 while (!(UCSRA & (1<< TXC)))			// wait until sending ends
 132:	5e 9b       	sbis	0x0b, 6	; 11
 134:	fe cf       	rjmp	.-4      	; 0x132 <Sende_In_ASCII+0x34>
		 {
		 }
		 UCSRA = UCSRA | (1<< TXC);
 136:	5e 9a       	sbi	0x0b, 6	; 11
	 UCSRB = (1<<TXEN);							// sending on receiving off
	 int i = 0;

	 for ( i = 0; i < 3; i++)
	 {
		 USART_Transmit (umgewandelte_Zahl[i]);
 138:	8c 2f       	mov	r24, r28
 13a:	dd df       	rcall	.-70     	; 0xf6 <USART_Transmit>
		 while (!(UCSRA & (1<< TXC)))			// wait until sending ends
 13c:	5e 9b       	sbis	0x0b, 6	; 11
 13e:	fe cf       	rjmp	.-4      	; 0x13c <Sende_In_ASCII+0x3e>
		 {
		 }
		 UCSRA = UCSRA | (1<< TXC);
 140:	5e 9a       	sbi	0x0b, 6	; 11
		 i++;
	 }

 }
 142:	cf 91       	pop	r28
 144:	08 95       	ret

00000146 <main>:
//##################################################################################

int main(void)
{
	//######################## IO config engine ####################################
	DDRB |= (1<<PB1)|(1<<PB2);
 146:	87 b3       	in	r24, 0x17	; 23
 148:	86 60       	ori	r24, 0x06	; 6
 14a:	87 bb       	out	0x17, r24	; 23
	DDRD |= (1<<PD6)|(1<<PD7);
 14c:	81 b3       	in	r24, 0x11	; 17
 14e:	80 6c       	ori	r24, 0xC0	; 192
 150:	81 bb       	out	0x11, r24	; 17
	initPWM(prescaler,counterValue_PWM);
 152:	6f ef       	ldi	r22, 0xFF	; 255
 154:	70 e0       	ldi	r23, 0x00	; 0
 156:	88 e0       	ldi	r24, 0x08	; 8
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	6e df       	rcall	.-292    	; 0x38 <initPWM>
	USART_Init(MYUBRR);
 15c:	85 ec       	ldi	r24, 0xC5	; 197
 15e:	92 e0       	ldi	r25, 0x02	; 2
 160:	c2 df       	rcall	.-124    	; 0xe6 <USART_Init>
	//float dutyc_f=0.32;						// slower forward duty cycle
	//float dutyc_b=0.21;						// slower backward dutycycle


	//################## Input and Output Setups rough draft ###########################
	PINC &= ~((1 << PC2) | (1 << PC3) | (1 << PC1)); //
 162:	83 b3       	in	r24, 0x13	; 19
 164:	81 7f       	andi	r24, 0xF1	; 241
 166:	83 bb       	out	0x13, r24	; 19
	PIND &= 0;
 168:	80 b3       	in	r24, 0x10	; 16
 16a:	10 ba       	out	0x10, r1	; 16
	PINB &= 0;
 16c:	86 b3       	in	r24, 0x16	; 22
 16e:	16 ba       	out	0x16, r1	; 22
	UCSRB &= ~(1<<RXEN);
 170:	54 98       	cbi	0x0a, 4	; 10
	UCSRB |= (1<<TXEN);
 172:	53 9a       	sbi	0x0a, 3	; 10
	Drive(dutyc_f,counterValue_PWM);
	AccelerationRead();
	Delay(0);
	*/
	//LightRead();
	Sende_In_ASCII(test);
 174:	82 e4       	ldi	r24, 0x42	; 66
 176:	c3 df       	rcall	.-122    	; 0xfe <Sende_In_ASCII>
 178:	fd cf       	rjmp	.-6      	; 0x174 <main+0x2e>

0000017a <_exit>:
 17a:	f8 94       	cli

0000017c <__stop_program>:
 17c:	ff cf       	rjmp	.-2      	; 0x17c <__stop_program>
